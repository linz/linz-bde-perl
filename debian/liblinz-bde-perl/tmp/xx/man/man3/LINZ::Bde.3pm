.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LINZ::Bde 3pm"
.TH LINZ::Bde 3pm "2017-06-12" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
LINZ::Bde \-\- Reads and parses Landonline BDE files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use LINZ::Bde;
\&
\&  # LINZ::BdeFile functions
\&
\&  LINZ::BdeFile::set_bde_path("c:/bde_data/level0/20100301230530");
\&  LINZ::BdeFile::set_srid_lon_offset(4167,160.0);
\&
\&  $bdefile = LINZ::BdeFile\->open("par1");
\&  $bdefile\->copy( $outputfile );
\&  $bdefile\->copy( $outputfile, 
\&        config=>$cfg, 
\&        output_fields=>\*(Aqid|shape\*(Aq,
\&        add_file=>\*(Aq/archive/l0/zajb.l0.1.gz+/archive/l0/zajb.l0.2.gz\*(Aq,
\&        use_archive=>0,
\&        append=>0,
\&        compress=>0,
\&        keep_log=>1,
\&        );
\&
\&  $bdefile = LINZ::BdeFile\->open("par1");
\&  $bdefile\->output_fields(qw/id area status shape/);
\&
\&  print "Selected fields ",join(", ",$bdefile\->output_fields),"\en";
\&  print "Reading table ",$bdefile\->table," from ",$bdefile\->path,"\en";
\&  print "Table fields ",join(", ",$bdefile\->fields),"\en";
\&  print "Start time ",$bdefile\->start_time,"\en";
\&  print "End time ",$bdefile\->end_time,"\en";
\&
\&  while(1)
\&  {
\&     eval {
\&       last if ! $bdefile\->next;
\&       print join("\et",@{$bdefile\->data}),"\en";
\&     };
\&     if( $@ )
\&     {
\&       print "Error: $@\en";
\&     }
\&  }
\&  $bdefile\->close;
\&
\&  # LINZ::BdeRepository/LINZ::BdeDataset functions
\&
\&  $bde = new LINZ::BdeRepository;
\&  $bde = new LINZ::BdeRepository("\e\e\e\ebde_server\e\ebde_data");
\&  $bde = new LINZ::BdeRepository("\e\e\e\ebde_server\e\ebde_data\e\el5",\*(Aq5\*(Aq);
\&  $l0 = $bde\->level0;
\&  $l5 = $bde\->level5;
\&  $datasets = $l5\->datasets;
\&  $subset = $l5\->after("20091012");
\&  $subset = $l5\->before("20091012");
\&  $dataset = $l5\->dataset("20091012030201");
\&  $last_dataset = $l5\->last_dataset;
\&  $new_datasets = $l5\->after("20091012")\->datasets;
\&
\&  $dataset = new LINZ::BdeDataset("c:/bde_data/l5/20091012034112",\*(Aq5\*(Aq);
\&  $level = $dataset\->level;
\&  $files = $dataset\->files;
\&  $ok = $dataset\->has_file("wrk1");
\&  $bdefile = $dataset\->open("wrk1");
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
The Bde  module is used to read bulk-data extract files generated by Landonline.  These are pipe delimited
files of data.  The data in each file is preceded by header text defining the nature of the extract and 
the table and fields in the data.  The module allows for reading the files in text or compressed mode. 
It also modifies geometry properties, adding an \s-1SRID\s0 to the beginning and optionally offsetting the longitude.
.PP
The module also includes classes to manage a \s-1BDE\s0 repository.  This consists
of subfolders level_0 and level_5 for the full and incremental update files.
Each folder contains subfolders for each update, which are named according to 
the time of the update as YYYYMMDDhhmmss.  Within each folder the files for
each table are named xxx.crs.gz, where xxx is a code for the table.
.PP
The repository may also contain subfolders level_0_archive and level_5_archive.
These contain additional data files which contain data that is part of the
table, but is not included in the files retrieved from Landonline.  These hold
data from the tables that is assumed to never change (historic data), and for 
efficiency is not included in the extract.  These files are called xxx.yyy where
yyy is an arbitrary continuation of the file name.  If yyy ends \*(L".gz\*(R" the file
is assumed to be gzipped.  If it contains a string \*(L".YYYYMMDDhhmmss.\*(R" then it 
will be included with updates after that date.
.SH "Description"
.IX Header "Description"
.SS "Class methods"
.IX Subsection "Class methods"
The following class functions are provided:
.IP "LINZ::BdeFile::set_bde_path( path )" 4
.IX Item "LINZ::BdeFile::set_bde_path( path )"
Sets a default directory in which to find \s-1BDE\s0 files.
.IP "LINZ::BdeFile::set_srid_lon_offset( srid, [lon_offset] )" 4
.IX Item "LINZ::BdeFile::set_srid_lon_offset( srid, [lon_offset] )"
Sets the geometry \s-1SRID\s0 and the longitude offset applied to geometry fields.  These default to 4167 and 160.0.
.IP "LINZ::BdeFile::set_encoding( encoding )" 4
.IX Item "LINZ::BdeFile::set_encoding( encoding )"
Sets the encoding used to read the file.  The default is cp\-1252.
.PP
When a new LINZ::BdeFile is created it uses the class properties currently in effect.  Subsequent changes do not affect the reader.
.SS "Instance methods"
.IX Subsection "Instance methods"
.ie n .IP "$bdefile = LINZ::BdeFile\->new( file, [fields] )" 4
.el .IP "\f(CW$bdefile\fR = LINZ::BdeFile\->new( file, [fields] )" 4
.IX Item "$bdefile = LINZ::BdeFile->new( file, [fields] )"
Open a reader on a file.  The filename can be a full file name.  If not the reader will try appending .crs and .crs.gz, and try prepending the current bde path.  
Optionally this can include a hash ref of field definitions, each entry of which contains a space separated field name 
and type.  The type is ignored, apart from if it contains \*(L"geometry\*(R", in which case the geometry fixes will be applied.
This will die if the file cannot be found.
Note that some files have incorrect fields defined in the file header.  These 
are defined in the \f(CW$override_columns\fR variable.  Currently those defined are 
ct01 and ct02.
.ie n .IP "$f = $bdefile\->name" 4
.el .IP "\f(CW$f\fR = \f(CW$bdefile\fR\->name" 4
.IX Item "$f = $bdefile->name"
.PD 0
.ie n .IP "$f = $bdefile\->path" 4
.el .IP "\f(CW$f\fR = \f(CW$bdefile\fR\->path" 4
.IX Item "$f = $bdefile->path"
.PD
Returns the name and full path of the file being read
.ie n .IP "$t = $bdefile\->table" 4
.el .IP "\f(CW$t\fR = \f(CW$bdefile\fR\->table" 4
.IX Item "$t = $bdefile->table"
Returns the name of the table contained in the file
.ie n .IP "$s = $bdefile\->start_time" 4
.el .IP "\f(CW$s\fR = \f(CW$bdefile\fR\->start_time" 4
.IX Item "$s = $bdefile->start_time"
.PD 0
.ie n .IP "$e = $bdefile\->end_time" 4
.el .IP "\f(CW$e\fR = \f(CW$bdefile\fR\->end_time" 4
.IX Item "$e = $bdefile->end_time"
.PD
Returns the start and end time specified for the extract
.ie n .IP "$c = $bdefile\->fields" 4
.el .IP "\f(CW$c\fR = \f(CW$bdefile\fR\->fields" 4
.IX Item "$c = $bdefile->fields"
Returns an array or array reference to a list of field names
.ie n .IP "$bdefile\->archive_files(files)" 4
.el .IP "\f(CW$bdefile\fR\->archive_files(files)" 4
.IX Item "$bdefile->archive_files(files)"
Retrieve or specify the archive files to include with the 
data set.  If the file is opened from a BdeRepository/BdeDataset
then this will be automatically populated.
.ie n .IP "$bdefile\->output_fields(fields)" 4
.el .IP "\f(CW$bdefile\fR\->output_fields(fields)" 4
.IX Item "$bdefile->output_fields(fields)"
Choose which fields are to be read from the file.  
The default is to read all fields.  \fIfields\fR can be 
an array or array reference of field names.  Any names not matched 
in the file are silently ignored.  Matching field
names is case insensitive.  The function can be called without 
any parameters to return the list of selected fields.
.ie n .IP "$bdefile\->next" 4
.el .IP "\f(CW$bdefile\fR\->next" 4
.IX Item "$bdefile->next"
Moves the reader on to the next field.  Returns 1 if successful, 0 if the end of file is reached.  Data format errors
will generate an exception.
.ie n .IP "$d = $bdefile\->data" 4
.el .IP "\f(CW$d\fR = \f(CW$bdefile\fR\->data" 4
.IX Item "$d = $bdefile->data"
Returns an array reference of the selected fields.  This can only be called after \f(CW\*(C`$bdefile\->next\*(C'\fR.
.ie n .IP "$bdefile\->close" 4
.el .IP "\f(CW$bdefile\fR\->close" 4
.IX Item "$bdefile->close"
Releases the file handle used by the reader
.ie n .IP "$result = $bdefile\->copy" 4
.el .IP "\f(CW$result\fR = \f(CW$bdefile\fR\->copy" 4
.IX Item "$result = $bdefile->copy"
Copies the data from the \s-1BDE\s0 file to another file, applying transformations 
defined by the configuration.  Uses the bde_copy.exe program.  \f(CW$result\fR is 
a hash containing:
.RS 4
.IP "success" 4
.IX Item "success"
True or false
.IP "status" 4
.IX Item "status"
A text value representing the reuslt status
.IP "nrec" 4
.IX Item "nrec"
The number of records
.IP "nerrors" 4
.IX Item "nerrors"
The number of errors
.IP "errors" 4
.IX Item "errors"
An array reference for a list of errors
.IP "warnings" 4
.IX Item "warnings"
An array reference for a list of warnings
.IP "fields" 4
.IX Item "fields"
An array reference for a list of output fields
.RE
.RS 4
.RE
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 779:" 4
.IX Item "Around line 779:"
=over without closing =back
